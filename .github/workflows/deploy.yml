name: 🚀 Déploiement Automatique CommuniConnect

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Tests et validation
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🔧 Configuration Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Installation des dépendances backend
      working-directory: ./server
      run: npm ci
      
    - name: 📦 Installation des dépendances frontend
      working-directory: ./client
      run: npm ci
      
    - name: 🧪 Tests backend
      working-directory: ./server
      run: npm test --if-present
      
    - name: 🧪 Tests frontend
      working-directory: ./client
      run: npm test --if-present -- --watchAll=false
      
    - name: 🔨 Build frontend
      working-directory: ./client
      run: npm run build
      
    - name: ✅ Validation du build
      run: |
        if [ -d "client/build" ]; then
          echo "✅ Build frontend réussi"
        else
          echo "❌ Build frontend échoué"
          exit 1
        fi

  # Déploiement sur Render (Backend)
  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🚀 Déploiement sur Render
      uses: johnbeynon/render-deploy-action@v1.0.0
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: ✅ Vérification du déploiement backend
      run: |
        echo "Attente du déploiement backend..."
        sleep 60
        
        # Test de l'endpoint de santé
        BACKEND_URL="https://${{ secrets.RENDER_SERVICE_NAME }}.onrender.com"
        echo "Test de l'endpoint: $BACKEND_URL/api/health"
        
        # Attendre que le service soit disponible
        for i in {1..10}; do
          if curl -f "$BACKEND_URL/api/health" > /dev/null 2>&1; then
            echo "✅ Backend déployé avec succès"
            break
          fi
          echo "⏳ Attente... ($i/10)"
          sleep 30
        done

  # Déploiement sur Vercel (Frontend)
  deploy-frontend:
    needs: [test, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      
    - name: 🚀 Déploiement sur Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./client
        vercel-args: '--prod'
        
    - name: ✅ Vérification du déploiement frontend
      run: |
        echo "✅ Frontend déployé sur Vercel"
        echo "🌐 URL: https://${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app"

  # Notification de succès
  notify-success:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📧 Notification de succès
      if: success()
      run: |
        echo "🎉 Déploiement réussi !"
        echo "Backend: https://${{ secrets.RENDER_SERVICE_NAME }}.onrender.com"
        echo "Frontend: https://${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app"
        
    - name: 📧 Notification d'échec
      if: failure()
      run: |
        echo "❌ Déploiement échoué"
        echo "Consultez les logs pour plus de détails"
        
    - name: 📊 Résumé du déploiement
      run: |
        echo "## 📊 Résumé du Déploiement" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "✅ **Backend**: Déployé sur Render" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend**: Échec du déploiement" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "✅ **Frontend**: Déployé sur Vercel" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Frontend**: Échec du déploiement" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **URLs**: " >> $GITHUB_STEP_SUMMARY
        echo "- Backend: https://${{ secrets.RENDER_SERVICE_NAME }}.onrender.com" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: https://${{ secrets.VERCEL_PROJECT_NAME }}.vercel.app" >> $GITHUB_STEP_SUMMARY
